{
    "Abstract Factory": "Abstract Factory. Allows the creation of objects without specifying their concrete type.",
    "Builder": "Builder. Uses to create complex objects.",
    "Factory Method": "Factory Method. Creates objects without specifying the exact class to create.",
    "Prototype": "Prototype. Creates a new object from an existing object.",
    "Singleton": "Singleton. Ensures only one instance of an object is created.",
    "Adapter": "Adapter. Allows for two incompatible classes to work together by wrapping an interface around one of the existing classes.",
    "Bridge": "Bridge. Decouples an abstraction so two classes can vary independently.",
    "Composite": "Composite. Takes a group of objects into a single object.",
    "Decorator": "Decorator. Allows for an object\u2019s behavior to be extended dynamically at run time.",
    "Facade": "Facade. Provides a simple interface to a more complex underlying object.",
    "Flyweight": "Flyweight. Reduces the cost of complex object models.",
    "Proxy": "Proxy. Provides a placeholder\u00a0interface to an underlying object to control access, reduce cost, or reduce complexity.",
    "Chain of Responsibility": "Chain of Responsibility. Delegates commands to a chain of processing objects.",
    "Command": "Command. Creates objects which encapsulate actions and parameters.",
    "Interpreter": "Interpreter. Implements a specialized language.",
    "Iterator": "Iterator. Accesses the elements of an object sequentially without exposing its underlying representation.",
    "Mediator": "Mediator. Allows loose coupling between classes by being the only class that has detailed knowledge of their methods.",
    "Memento": "Memento. Provides the ability to restore an object to its previous state.",
    "Observer": "Observer. Is\u00a0a publish/subscribe pattern which allows a number of observer objects to see an event.",
    "State": "State. Allows an object to alter its behavior when its internal state changes.",
    "Strategy": "Strategy. Allows one of a family of algorithms to be selected on-the-fly at run-time.",
    "Template Method": "Template Method. Defines the skeleton of an algorithm as an abstract class, allowing its sub-classes to provide concrete behavior.",
    "Visitor": "Visitor. Separates an algorithm from an object structure by moving the hierarchy of methods into one object."
}