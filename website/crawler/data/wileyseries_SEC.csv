"Identity Management	Circle of Trust	""In such large open environments", subjects are typically registered (have accounts) with unrelated services. Subjects may have no relationships with many other services available in the open environment. It may be cumbersome for the subject to deal with multiple accounts, and it may not be secure to build new relationships with other services, since identity theft or violation of privacy can be performed by rogue services. How can we take advantage of relationships between service providers to avoid the inconvenience of multiple log-ins and to select trusted services? The solution to this problem must resolve the following forces: Service providers are numerous on public networks. It can be cumbersome, indeed impossible," for each service provider to define relations with every other provider. The service providers’ infrastructures for their subjects’ login may be implemented using different technologies.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Identity Management	Identity Provider	""Each application or service may implement its own code for managing subjects’ identity information"," leading to an overloading of implementation and maintenance costs that may lead to inconsistencies across the organization’s units.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,,
"Identity Management	Identity Federation	""There may be no relationship between some of the security domains accessed by a subject. Thus", subjects may have multiple unrelated identities within each security domain. Consequently, they may experience multiple and cumbersome registrations, authentications and other identityrelated tasks prior to accessing the services they need. How can we avoid the inconvenience of multiple registrations and authorizations across security domains? The solution to this problem must resolve the following forces: The identity of a user can be represented in a variety of ways in different domains. Parts of a subject’s identity within a security domain may include sensitive information that should not be disclosed to other security domains. The identity and security-related information in transit between two security domains should be kept confidential, so that eavesdropping," tampering or identity theft cannot be realized. A subject may want to access a security domain’s resources in an anonymous way.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Identity Management	Liberty Alliance Identity Federation	""There may not be any relationship between service providers", thus users may have multiple unrelated accounts. Consequently, they may experience multiple and cumbersome registrations, authentications and other identityrelated tasks prior to accessing the services they need on the Internet. How can we leverage a federated identity of a user on the Internet? The solution to this problem is affected by the forces of IDENTITY FEDERATION (page 39)," and by the following additional forces: The identity of a user can be represented in a variety of ways by different services. Parts of the user’s information may need to be kept confidential and not shown to some service providers.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Authentication	Authenticator	""How can we prevent imposters from accessing our system? A malicious attacker could try to impersonate a legitimate user to gain access to their resources. This could be particularly serious if the user impersonated has a high level of privilege. How do we verify that a user intending to access the system is legitimate? The solution to this problem must resolve the following forces: Flexibility. A variety of users require access to the system and a variety of system units exist with differently sensitive assets. We need to be able to handle all this variety appropriately", or we risk security exposures. Dependability. We need to authenticate users in a reliable and secure way. This means using a robust protocol and a way to protect the results of authentication. Otherwise, users may skip authentication, or illegally modify its results, exposing the system to security violations. Cost. There are trade-offs between security and cost: more secure systems are usually more expensive. Performance. If authentication needs to be performed frequently," performance may become an issue. Frequency. We should not make subjects authenticate frequently.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Authentication	Remote Authenticator/Authorizer	""A system with centralized authentication is easier to manage and potentially more secure", but it is not flexible enough for distributed systems. How can we provide authentication and authorization in a distributed environment without the need for redundant storage of rights? The solution to this problem must resolve the following forces: Non-redundancy. Storing user authentication and authorization information at multiple locations makes it redundant, difficult to administer and prone to inconsistencies. Rights transparency. Although authentication information may be stored anywhere, this location should be transparent to users. Rights consistency. Users typically work in the context of some role, and these roles should be standard across a variety of domains," at least within a company or institution. Accountability. We need a way to keep users accountable when they are accessing remote resources.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Authentication	Credential	""In centralized computer systems", the authentication and authorization of a principal can be handled by that system’s operating system, middleware and/or application software; all attributes of the principal’s identity and authorization are created by and are available to the system. With distributed systems this is no longer the case. A principal’s identity, authentication and authorization on one system does not carry over to another system. If a principal is to gain appropriate access to another system, some means of conveying this information must be introduced. More broadly, this is a problem of exchanging data between trust boundaries. Within a given trust boundary, a single authority is in control, and can authenticate and make access decisions on its own. If the system is to accept requests from outside its own authority/trust boundary, the system has no inherent way of validating the identity or authorization of the entity making that request. How then do we allow external users to access some of our resources? The solution to this problem must resolve the following forces: Privacy. The user must provide enough information to grant authorization, without being exposed to intrusive data mining. Persistence. The information must be packaged and stored in a way that survives travel between systems, while allowing the data to be kept private. Authentication. The data available must be sufficient for identifying the principal to the satisfaction of the accepting system’s requirements, while disallowing others from accessing the system. Authorization. The data available must be sufficient for determining what actions the presenting principal is permitted to take within the accepting system," while also disallowing actions the principal is not permitted to take. Trust. The system accepting the credential must trust the system issuing the credential. Generation. There must be entities that produce the credentials such that other domains recognize them. Tamper freedom. It should be very difficult to falsify the credential. Validity. The credential should have an explicit temporal validity. Additional documents. It might be necessary to use the credential together with other documents. Revocation. It should be possible to revoke the credential conveniently.""	Security Patterns in Practice	SEC",,,,,,
"Access Control	Authorization	""We need a way to control access to resources", otherwise any active entity (user, process) could access any resource and we could have confidentiality and integrity problems," as well as misuse of network bandwidth or peripheral devices. How can we describe who is authorized to access specific resources in a system? The solution to this problem must resolve the following forces: Independence. The resource control structure must be independent of the type of resources and must apply to all of them. Flexibility. The resource control structure should be flexible enough to accommodate different types of subjects and resources. Modifiability. It should be easy to modify the rights of active entities in response to changes in their duties or responsibilities. Security. The resource control structure should be protected against tampering.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,
"Access Control	Role-Based Access Control	""For convenient administration of authorization rights", we need to have a means of factoring out rights. Otherwise, the number of individual rights is just too large; granting rights to individual users would require storing many authorization rules, and it would be hard for administrators to keep track of these rules. It is also hard to associate semantic meanings to the rules. How can we reduce the number of rules and make their semantics clearer? The solution to this problem must resolve the following forces: Complexity. We would like to make the work of the security administrator as simple as possible. Semantics. In most organizations people are assigned specific functions or tasks. Their rights should correspond to those tasks. Policy. We need to define rights according to organizational policies. Commonality. People performing the same tasks should have the same rights. Policy enforcement. We want to help the organization to define precise access rights for its members according to a need-to-know policy. Flexibility. People joining," leaving and changing functions should not require complex rights manipulation.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Access Control	Multilevel Security	""How can you control access in an environment with sensitive documents so as to prevent leakage of information? The solution to this problem must resolve the following forces: We need to protect the confidentiality and integrity of data based on its sensitivity. Users have to be allowed to read documents based on their position in the organization. There should be a way to increase or decrease the ability of users to read documents and the sensitivity of the documents. Otherwise", people promoted to higher positions, for example, will not be able to read sensitive documents," and we will end up with a proliferation of sensitive and obsolete documents.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Access Control	Policy-Based Access Control	""Enforcing these rules for a particular access request may be complex", and thus error-prone, because there is no clear view of which rules to apply to a request. How can we enforce access control according to the predefined rules in a consistent way? The solution to this problem must resolve the following forces: Objects may be frequently added or removed. The solution should be able to implement a wide variety of access control models, such as access matrix," RBAC. Malicious users can attempt unauthorized access to objects. There should be no direct access to objects: every request must be mediated.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Access Control	Access Control List	""In some systems the number of subjects and/or objects can be large. In this case", the direct implementation of an access matrix can use significant amounts of storage, and the time used for searching this large matrix can be significant. In practice, the matrix is sparse. Subjects have rights on few objects and thus most of the entries are empty. How can we implement the access matrix in a space- and time-efficient way? The solution to this problem must resolve the following forces: The matrix may have many subjects and objects. Finding the rule that authorizes a specific request to an object may take a lot of time, as entries are unordered. The matrix can be very sparse: storing it as a matrix would require storing many empty entries, thus wasting space. Subjects and objects may be frequently added or removed. Making changes in a matrix representation is inefficient. The time spent for accessing a centralized access matrix may result in an additional overhead. A request received by a policy enforcement point indicates the requester identity, the requested object and the type of access requested. The requester identity, in particular, is controlled by the requester," and so may be forged by a malicious user.""	Security Patterns in Practice	SEC",,,,,,,,,
"Access Control	Capability	""In some of these systems the number of subjects and/or objects can be large. In this case", the direct implementation of the access matrix can use significant amounts of storage, and the time to search a large matrix can be significant. In practice, the matrix is sparse. Subjects have rights on few objects and thus most of the entries are empty. How can we implement the access matrix in a space- and time-efficient way? The solution to this problem must resolve the following forces: The matrix may have many subjects and objects. Finding the rule that authorizes a specific request to an object may take a lot of time (unordered entries). The matrix can be very sparse, and storing it as a matrix would require storing many empty entries, thus wasting space. Subjects and objects may be frequently added or removed. Making changes in a matrix representation is inefficient. The time spent for accessing a centralized access matrix may result in an additional overhead. A request received by a policy enforcement point indicates the requester identity, the requested object and the type of access requested. The requester identity, in particular, is controlled by the requester," and so may be forged by a malicious user. The size of the units that can create and/or modify the policies (such as policy administration points) has an impact on the security of the system. Minimizing their size will reduce their chance of being compromised by attackers.""	Security Patterns in Practice	SEC",,,,,,,,,
"Access Control	Reified Reference Monitor	""Not enforcing the defined authorizations is the same as not having them: subjects can perform all types of illegal actions. Any user could read any file", for example. How can we control the subjects’ actions? Also, an access decision can be sometimes more complex than a Boolean response; for example, when a user wants to access a database type: they may be authorized to access a subset of the data requested as per the rules. In this case, the reference monitor communicates with the subject and the decision is not Boolean – ‘yes’ or ‘no’: it can be either a display on the screen, some statement, or maybe negation. In many cases there is also the need to keep decisions in memory. If the same subject requests the same object again, the system should not spend time in redeciding, as it affects performance. The solution to this problem must resolve the following forces: Defining authorization rules is not enough: they must be enforced whenever a subject makes a request for a protection object. There are many possible implementations: we need an abstract model of enforcement. Decisions should be sent to the subject, as they can be more complex than mere Boolean decisions. By defining set of attributes for decisions," we can make the reference monitor more flexible.""	Security Patterns in Practice	SEC",,,,,,,,
"Access Control	Controlled Access Session	""A given user may be authorized to access a system because they need to perform several functional activities. However", for a particular access, only those privileges should be active that are necessary to perform the intended task. This is an application of the principle of least privilege, and is necessary to prevent the user from misusing the system, either intentionally, accidentally by performing an error, or without knowledge and tricked to do so, for example through a Trojan Horse attack. Additionally, it potentially restricts damage in the case of session hijacking: a successful attack process would not have all the privileges of a user available, only the active subset. The solution to this problem must resolve the following forces: Subjects may have many rights directly or indirectly through the execution contexts they need for their tasks. Using all of them at one time may result in conflicts of interest and security violations. We need to restrict the use of those rights depending on the application or task the subject is performing. In the context of an interaction we can make access to some functions implicit, thus facilitating the use of the system and preventing errors that may result in vulnerabilities. For example, some editors or other tools could be implicitly available in some sessions. It is not convenient to make subjects reauthenticate every time they request a new resource. Once the subject is authenticated," this condition should remain valid during the whole session.""	Security Patterns in Practice	SEC",,,,,,
"Access Control	Session-Based Role-Based Access Control	""In an organization a user may play several roles. However", for each access the user must act only within the authorizations of a single role (that is, within the context of the role) or combinations of roles that do not violate institution policies. How can we force subjects to follow the policies of the institution when using their roles? In addition to the forces defined for the CONTROLLED ACCESS SESSION pattern, the solution to this problem must resolve the following forces: People in institutions have different needs for access to information, according to their functions. They may have several roles associated with specific functions or tasks. We want to help the institution to define precise access rights for its members so that the least privilege policy can be applied when they perform specific tasks. Users may have more than one role and we may want to enforce policies such as separation of duty," where a user cannot be in two or more specific roles in the same session.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Access Control	Security Logger and Auditor	""How can we keep track of users’ actions in order to determine who did what and when? The solution to this problem must resolve the following forces: Accuracy. We should faithfully record what a user or process has done with respect to the use of system resources. Security. Any information we use to keep track of what the users have done must be protected. Unauthorized reading may reveal sensitive information. Tampering may erase past actions. Forensics. When a misuse of data occurs", it may be necessary to audit the access operations performed by users to determine possible unauthorized actions," and maybe trace the attacker or understand how the attack occurred. System improvement. The same misuses may keep occurring; we need to learn from past attacks. Compliance. We need a way to verify and to prove to third parties that we have complied with institution policies and external regulations. Performance. We need to minimize the overhead of logging.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,
"Secure Process Management	Secure Process/Thread	""We need to control the resources accessed by a process during its execution and protect its context from other processes. The resources that can be accessed by a process define its execution domain", and the process should not break the boundaries of this domain. The integrity of a process’ context is essential, not only for context switching, but also for security, so that it cannot be controlled by another process, and for reliability, to prevent a rogue process from interfering with other processes. The solution to this problem must resolve the following forces: If processes have unrestricted access to resources, they can interfere with the execution of other processes and misuse shared resources. We need to control what resources they can access. Processes should be given only the rights they need to perform their functions (need to know or least privilege principle ([Gol06], Chapter 3). The rights assigned to a process should be fine-grained, otherwise we cannot apply the least privilege principle. Each process requires some data, a stack," and space for temporary variables to store the status of its devices and other information. All this information resides in its address space and needs to be protected.""	Security Patterns in Practice	SEC",,,,,,,
"Secure Process Management	Controlled-Process Creator	""A computing system uses many processes or threads. Processes need to be created according to applications’ needs", and the operating system itself is composed of processes. If processes are not controlled, they can interfere with each other and access data illegally. Their rights to resources should be carefully defined according to appropriate policies, for example need to know. The solution to this problem must resolve the following forces: There should be a convenient way to select a policy to define process’ rights. Defining rights without a policy brings contradictory and unsystematic access restrictions that can be easily circumvented. The child process may need to run with its parent process’ rights for specific actions, but this should be carefully controlled, otherwise a compromised child could leak information or destroy data. The number of children created by a process must be restricted, or process spawning could be used to perform denial-of-service attacks. There are situations in which a process needs to act with more than its normal rights," for example to get data from a file to which it doesn’t normally have access.""	Security Patterns in Practice	SEC",,,,,,,,,,,
"Secure Process Management	Controlled-Object Factory	""In a computing environment", executing applications need to create objects for their work. Some objects are created at program initialization, while others are created dynamically during execution. The access rights of processes with respect to objects must be defined when these processes are created, or there may be opportunities for the processes to misuse them. Applications also need resources such as I/O devices and others that may come from resource pools: when these resources are allocated, the application must be given rights to them. The solution to this problem must resolve the following forces: Applications create objects of many different types, but we need to handle them uniformly with respect to their access rights, otherwise it would be difficult to apply standard security policies. We need to allow objects in a resource pool to be allocated and have their rights set dynamically; not doing so would be too rigid. There may be specific policies that define who can access a new object," and we need to apply them when creating the rights for an object. This is a basic aspect of security.""	Security Patterns in Practice	SEC",,,,,,,,,,,
"Secure Process Management	Controlled-Object Monitor	""When objects are created we define the rights of processes over them. These authorization rules or policies must be enforced when a process attempts to access an object. The solution to this problem must resolve the following forces: There may be many objects with different access restrictions defined by authorization rules; we need to enforce these restrictions when a process attempts to access an object. We need to control different types of access"," or the object may be misused.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,,
"Secure Process Management	Protected Entry Points	""Process communication has an effect on security", because if a process calls another using entry points without appropriate checks, the calling process may read or modify data illegally, alter the code of the executing process, or take over its privilege level. If the checks are applied at specific entry points, some languages, such as C or C++, let the user manipulate pointers to bypass those entry points. Process communication also has a major effect on reliability, because an error in a process may propagate to others and disrupt their execution. The solution to this problem must resolve the following forces: Executing processes need to call each other to perform their functions. For example, in operating systems user processes need to call kernel processes to perform I/O, communications and other system functions. In all environments, process may collaborate to solve a common problem, and this collaboration requires communication. All this means that we cannot use process isolation to solve this problem. A call must go to a specified entry point or checks could be bypassed. Some languages let users alter entry point addresses, allowing input checks to be bypassed. A process typically provides services to other processes, but not all services are available to all processes. A call to a service not authorized to a process can be a security threat or allow error propagation. In a computing environment we have a variety of processes with different levels of trust. Some are processes that we normally trust, such as kernel processes; others may include operating system utilities, user processes and processes of uncertain origin. Some of these processes may have errors or be malicious. All calls need to be checked. The number, type and size of the passed parameters in a call can be used to attack a process," for example by producing a buffer overflow. Incorrect parameters may produce or propagate an error.""	Security Patterns in Practice	SEC"
"Secure Process Management	Protection Rings	""Defining a set of protected entry points is not enough if we cannot enforce their use. How can we prevent a process from calling another on an entry point that has no checks? We cannot rely on language features unless we only use a restricted set of languages", which is not practical in general. If all processes are alike we also need to apply the same checks to all of them, which may be overkill. The solution to this problem must resolve the following forces: We want to be able to enforce the application of protected entry points, at least for some processes. In this way, requests from suspicious processes can always be controlled. We would like to separate processes according to their level of trust, and check only calls from a low-level to a higher-level process. This can reduce execution-time overhead considerably. In each higher level we can check signature validity," as well as control access or apply reliability tests. These actions should result in a more secure execution environment.""	Security Patterns in Practice	SEC",,,,,,,,,,,,
"Secure Execution and File Management	Virtual Address Space Access Control	""Processes must be controlled when accessing memory", otherwise they could overwrite each other’s memory areas or gain access to private information. While relatively small amounts of data can be directly compromised, illegal access to system areas could allow a process to get a higher execution privilege level and thus access files and other resources. The solution to this problem must resolve the following forces: There is a need for a variety of access rights for each separate logical unit (segment) of the VAS. In this way security and controlled sharing are possible. There is a variety of virtual memory address space structures: some systems use a set of separate address spaces, others a single-level address space. Further, the VAS may be split between the users and the operating system. We would like to control access to all of these types of virtual memory in a uniform manner. For any approach to be efficient, hardware support is necessary. This implies that an implementation of the solution will require a specific hardware architecture. However," the solution must be hardwareindependent.""	Security Patterns in Practice	SEC",,,,,,,,,,,,
"Secure Execution and File Management	Execution Domain	""Restricting a process to a specific set of resources is a basic step to control malicious behavior. Otherwise", unauthorized processes could destroy or modify information in files or databases, with obvious results, or could interfere with the execution of other processes. The solution to this problem must resolve the following forces: There is a need to restrict the actions of a process during its execution, otherwise it could perform illegal actions. Resources typically include memory and I/O devices, but can also be system data structures and special instructions. Although resources are heterogeneous," we want to treat them uniformly. A process needs the flexibility to create multiple domains and to enter inner domains for specific purposes. There should be no restrictions on how the domain is implemented.""	Security Patterns in Practice	SEC",,,,,,,,,,,,
"Secure Execution and File Management	Controlled Execution Domain	""Even if direct access to files is restricted", users can use ‘tunneling’ to attack them through a lower level. If the process execution environment is uncontrolled, processes can scavenge information by searching memory and accessing disk drives. They might also take control of the operating system itself, in which case they have access to everything. The solution to this problem must resolve the following forces: We need to constrain the execution of processes and restrict them to use only resources that have been authorized based on the rights of the subject that activated the process. Subjects can be users, roles or groups. We want to deal with them uniformly. Resources typically include memory and I/O devices, but can also be files and special instructions. We want to consider them in a uniform way. A subject may need to activate several processes, and a process may need to create multiple domains. Execution domains may need to be nested. We want flexibility for our processes. Typically," only a subset of a subject’s rights needs to be used in a specific execution. We need to provide to a process only the rights it needs during its execution (using the principle of least privilege). The solution should put no constraints on implementation.""	Security Patterns in Practice	SEC",,,,,,,,,,,
"Secure Execution and File Management	Virtual Address Space Structure Selection	""We need to select the virtual address space for processes depending on the majority of the applications we intend to execute", otherwise we can have mismatches that may result in poor security or performance. The solution to this problem must resolve the following forces: Each process needs to be assigned a relatively large VAS to hold its data, stack, space for temporary variables, variables to keep the status of its devices, and other information. In multiprogramming environments processes have diverse requirements; some require isolation, others information sharing, others good performance. Data typing is useful to prevent errors and improve security. Several attacks occur by executing data and modifying code [Gol06]. Sharing between address spaces should be convenient," otherwise performance may suffer.""	Security Patterns in Practice	SEC",,,,,,,,,,
"Secure OS Architecture and Administration	Modular Operating System Architecture	""We need to be able to add or remove functions easily so that we can accommodate applications with a number of security requirements. How can we structure the operating system functions for this purpose? The solution to this problem must resolve the following forces: Operating systems for PCs and other types of uses require a large variety of plugins. New plugins appear frequently", and we need the ability to add and remove them without disrupting normal operation. Some of the plugins may contain malware; we need to isolate their execution so they do not affect other processes. We would like to hide security-critical modules from other modules to avoid possible attacks. Modules can call each other," which is a possible source of attacks.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,
"Secure OS Architecture and Administration	Layered Operating System Architecture	""Unstructured modules", as in the MODULAR OPERATING SYSTEM ARCHITECTURE pattern (page 165), have the problem that all modules can reach all other modules, which facilitates attacks. We need to conceal the existence of some critical modules. The solution to this problem must resolve the following forces: Interfaces should be stable and well-defined. Going through any interface could imply authorization checks. Parts of the system should be exchangeable or removable without affecting the rest of the system. For example, we could have modules that perform more security checks than others. Similar responsibilities should be grouped," to help understandability and maintainability. This contributes indirectly to improved security. We should control module visibility to avoid possible attacks from other modules. Complex components need further decomposition. This makes the design simpler and clearer and also improves security.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Secure OS Architecture and Administration	Microkernel Operating System Architecture	""In general-purpose environments we need to be able to add new functionality with variation in security and other requirements", as well as provide alternative implementations of services to accommodate different application requirements. The solution to this problem must resolve the following forces: The application platform must be able to cope with continuous hardware and software evolution: these additions may have very different security or reliability requirements. Strong security or reliability requirements indicate the need for modules with well-defined interfaces. We may want to perform different types of security checks in different modules, depending on their security criticality. We would like a minimum of functionality in the kernel, so that we have a minimum of processes running in supervisor mode. A simple kernel can be checked for possible vulnerabilities," which is good for security.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Secure OS Architecture and Administration	Virtual Machine Operating System Architecture	""Sometimes we need to execute different operating systems on the same hardware. How can we keep those operating systems isolated in such a way that their executions don’t interfere with each other? The solution to this problem must resolve the following forces: Each operating system needs to have access to a complete set of hardware features to support its execution. Each operating system has its own set of machine-dependent features", such as interrupt handlers. In other words, each operating system uses the hardware in different ways. When an operating system crashes or it is penetrated by a hacker," the effects of this situation should not propagate to other operating systems running on the same hardware. There should be no way for a malicious user in one virtual machine to get access to the data or functions of another virtual machine.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,
"Secure OS Architecture and Administration	Administrator Hierarchy	""Usually", the administrator has rights such as creating accounts and passwords, installing programs and so on. This creates a series of security problems. For example, a rogue administrator can perform all the usual functions, and even erase the log to hide their tracks. A hacker that takes over administrative power can do similar things. How can we curtail the excessive power of administrators to control rogue administrators or hackers? The solution to this problem must resolve the following forces: Administrators need to use commands that permit management of the system, for example define passwords for files, define quotas for files, and create user accounts. We cannot eliminate these functions. Administrators need to be able to delegate some responsibilities and privileges to manage large domains. They also need the right to take back these delegations, otherwise the system is too rigid. Administrators should have no control of system logs, or no valid auditing would be possible. Administrators should have no access to the operational data in the users’ applications. Or, if they do," their accesses should be logged.""	Security Patterns in Practice	SEC",,,,,,,
"Secure OS Architecture and Administration	File Access Control	""How can we control access to files in an operating system and ensure that only authorized users can use files in specific ways? The solution to this problem must resolve the following forces: There may be different types of subjects", for example users, roles and groups. The rights for users in groups or roles are derived from the group or role’s rights (that is, they are implicit rights). Groups of groups are possible, which makes deducing access even harder. All these subjects must be handled uniformly. Subjects may be authorized to access files or directories, and to exercise their file access rights from specific workstations. To prevent illegal actions, we may need ways to apply these two types of authorization. Each operating system implements file systems in a different way. We need to abstract out implementation details. Not all operating systems use workstations," groups or roles. We need a modular system in which features not used can be removed easily from the model.""	Security Patterns in Practice	SEC",,,,,,,,,,,
"Networks	Abstract Virtual Private Network	""In today’s world", companies have offices all over the world and a lot of people work remotely. They need a secure connection to other specific nodes so that confidential work can be performed securely. Their communication can be intercepted by attackers, who may get access to private information and may even modify the messages. How can we establish a secure channel for the end users of a network so that they can exchange messages through fixed points using an insecure network? The solution to this problem must resolve the following forces: We need to use the Internet or other insecure networks to reduce cost, but in turn subjecting our network to numerous threats. Only registered users should access the institution’s endpoints. We need to make sure that the users with which we are communicating are the right ones, otherwise confidentiality may be compromised. The number of users remotely connected may be growing: the system should be scalable. Because different users or institutions require different levels of security, the system should be flexible enough to accommodate different ways of providing security and different degrees of security. In some cases we also need to support authorization to access specific resources in the endpoints. The system should be easy to set up and use, otherwise users and administrators will not want to use it. The system should not impose a heavy performance penalty," otherwise it will not be used all the time. The pattern should be adaptable to the needs and constraints of different protocol layers.""	Security Patterns in Practice	SEC",,,,,,,,,,,
"Networks	IPSec VPN	""Assuming that we need to communicate using the IP protocol", how can we establish a secure channel for the end users of a network so that they can exchange messages through some fixed points? The solution to this problem must resolve the following forces: The number and required speed of the communications must decide the type of protection we use. The use of IPSec would provide higher speed between fixed physical locations [Sta03]. Communication at the IP level includes the network," servers and routers. Messages should be protected while going through all of them.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,
"Networks	TLS Virtual Private Network	""How can we establish a secure channel through the transport layer for the end users of a network so that they can exchange messages through fixed points? The solution to this problem must resolve the following forces: Messages will go from one process to another process"," through servers and routers. A message should maintain its security during this communication. The performance should be good at both normal and peak loads.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,,
"Networks	Transport Layer Security	""The messages communicated between applications and servers on the transport layer are vulnerable to attack by intruders", who may try to read or modify them. Either the server or the client may be imposters. The solution to this problem must resolve the following forces: Confidentiality and integrity. The data transferred in the transport layer between the client and the server could be intercepted and read, or modified illegally. Authenticity. Either the server or the client could be an imposter, which may allow security breaches. A ‘man-in-the-middle’ attack is also possible, in which an attacker poses both as the client to the server and as the server to the client. Flexibility. Security protocol should be flexible and configurable, to be able to handle new attacks. Transparency. The security measures of the protocol should be transparent to users. Configurability. The protocol should allow users to select different degrees of security. Overhead. The overhead should be minimal," or users will not want to use the protocol.""	Security Patterns in Practice	SEC",,,,,,,,,,,,
"Networks	Abstract IDS	""An attacker may try to infiltrate our system through the Internet and misuse our information by reading or modifying it. We need to know when an attack is happening and take appropriate response. The solution to this problem must resolve the following forces: Communication. The system is usually more secure if we have a closed network. However in today’s world it is better and more realistic to use the Internet or other insecure network to reduce costs", which may subject our network to security threats. Real time behavior. Attacks should be detected before the attack completes its purpose, so that we can preserve our assets and save time and money. It is difficult to detect an attack when it is happening, but such detection is imperative if we are to react timely and appropriately. Incomplete security. Security measures such as encryption, authentication and so on may not protect all our systems, because they do not cover all possible attacks. Non-suspicious users. Protecting our system through a firewall is quick and easy. However, request coming from a non-suspicious address (that is," one permitted by a firewall) could still be harmful and should be monitored further. Flexibility. Hard-coding the type of attack can be done easily. But it will be hard and time-consuming to adapt to attack patterns that change constantly.""	Security Patterns in Practice	SEC",,,,,,,,,,,
"Networks	Signature-Based IDS	""Whenever data is accessed from the distrusted networks", there is always a possibility that this access can be harmful to the local node. We need to detect possible attacks while they are occurring. Security techniques such as authentication and firewalls are usually implemented to provide security, but we need additional defenses to detect whether an access request is a possible attack or not. The solution to this problem must resolve the following forces: Known attacks. It is easier to protect the system against known attacks. Many attacks are new instances of known attacks and have a well-defined attack signature. Completeness. If we have a complete collection of known attacks and their signatures, it is easier to detect an attack exhibiting one of these signatures. Flexibility. Hard-coding the type of attack can be done easily," but it will be hard and time-consuming to adapt to attack patterns that keep changing constantly.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Networks	Behavior-Based IDS	""Whenever data is accessed from the Internet or other external networks", there is always a possibility that this access can be harmful to the network. We need to detect possible attacks while they are occurring. The solution to this problem must resolve the following forces: New attacks. In today’s world networks are constantly bombarded with new attacks that do not have a specific attack signature. We need to detect these kinds of attacks. Real-time. We need to detect attacks in real time while they are happening, and not after the attack has happened and it is too late to recover from it. Increased vulnerability. Some networks, such as mobile networks," are more vulnerable to unknown attacks because of their mobile nature.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Web Services Security	Application Firewall	""Enterprise applications in an organization’s internal network are accessed by a broad spectrum of users that may attempt to abuse its resources (leakage", modification or destruction of data). These applications can be numerous, and thus implement access control independently in ad hoc ways, making the system more complex and thus less secure. Moreover, traditional network firewalls (application layer firewalls or packet filters)," do not make it possible to define high-level rules (rolebased or individual-based rules) that could make the implementation of security policies easier and simpler. How can we control the hostile actions of users who access our applications? The solution to this problem must resolve the following forces: There may be many subjects that need to access an application in different ways; the firewall must accommodate this variety. There are many ways to filter application inputs. We need to separate the filtering code from the application code. There may be numerous applications that may require different levels of security. We need to define appropriate policies for each application. The security policies are constantly changing and need to be constantly updated. It should therefore be easy to change the firewall filtering configuration. The number of users and applications may increase significantly. Adding more users or applications should be done transparently and at proper cost. Network firewalls cannot understand the semantics of applications and are unable to filter out potentially harmful messages. Any type of security policy should be enforceable by the firewall. There are many ways to perform authentication. The firewall must support this variety.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Web Services Security	XML Firewall	""Some enterprise applications use tunneling into authorized flows (HTTP", SMTP) to communicate with external sites. They use higher-level protocols such as SOAP and communicate through XML documents or XML-wrapped remote procedure calls. The XML content of these messages can contain harmful data and can be used to perform attacks against applications. Network firewalls provide infrastructure security, but become useless when these high-level protocols and formats are used. The solution to this problem must resolve the following forces: Document or remote procedure call formats are subject to change; some new ones may appear (XML dialects). The firewall must adapt easily to these changes. New types of harmful data may be used by attackers; the firewall must adapt easily to these new types of attacks. There are many ways to filter; we need to separate the filtering code from the application code. There may be numerous applications that may require different levels of security. New applications may be integrated into the system after the firewall has been put into operation. This integration should not require significant additional costs. Network firewalls cannot understand the contents of XML messages or application semantics," and do not stop potentially harmful messages.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,
"Web Services Security	XACML Authorization	""An organization’s resources are usually of various types (XML documents", web services, web components, CORBA services). Access to these resources is controlled by distributed enforcement mechanisms, according to the security policies of the institution. Since the resources are of different types, the enforcement mechanisms come in various forms: they can be part of a web server, an application firewall, and so on. Therefore, policies have to be implemented in many locations, using different syntaxes. It is important to define precisely the policies about accessing these resources. Moreover, security policies in an organization are typically issued by different actors from its departments (human resources, legal, marketing departments), and the policies they write may concern a wide and overlapping set of resources. Defining these policies in such a way that the correct policies can be applied to each access may be complex, and thus error-prone. How can we unify the definition of access policies throughout the organization, making the whole system simpler and less error-prone? The solution to this problem must resolve the following forces: The policies are issued by a variety of actors and may be stored in many locations. This means that they may be expressed in different forms. The policies are constantly changing and need to be constantly updated. An active entity accessing a resource can be represented in a variety of ways, including certificates. Some policies can require a set of actions (or obligations) to be performed in conjunction with policy enforcement (auditing, notification). The environment in which an access is requested can also affect the access decision. For instance," an access may only be permitted at some hours of the day.""	Security Patterns in Practice	SEC"
"Web Services Security	XACML Access Control Evaluation	""An organization’s resources are usually of various types. Accesses to these resources are controlled by distributed enforcement mechanisms", according to its security policies. Since the resources are of different types, the enforcement mechanisms come in various forms: they can be a part of a web server, an application firewall, and so on. Therefore, the organization has to set up and maintain numerous authorization systems for its networks. How can we enforce the rules defined in the institution policies? The solution to this problem must resolve the following forces: Enforcement points could be implemented in a variety of systems (part of a web server," in a WAN and so on). Any type of security policy should be enforceable. Enforcement may require reading system or environment variables.""	Security Patterns in Practice	SEC",,,,,,,,,,,,
"Web Services Security	Web Services Policy Language	""Web services are services that are accessible by means of messages sent using standard web protocols", notations and naming conventions [Pap03]. In addition, they are self-describing through Web Services Description Language (WSDL) and can be discovered (perhaps automatically) using Universal Description, Discovery and Integration (UDDI). Therefore, using different syntaxes for their policy descriptions would reduce the two properties of self-description and discoverability. Moreover, security policies are typically issued by different actors in different departments, and the policies they write may concern a wide and overlapping set of web services. Applying the right policies to each access to a web service may also be complex, and thus error-prone. How can we describe policies to control web services invocations? The solution to this problem must resolve the following forces: The policies are issued by a variety of actors in an organization and may be stored in many locations. Web services consumers can also issue policies (requirements). For example," a consumer could require a service to have a certificate from a well-known certification authority. Any type of security policy should be enforceable. The policies are constantly changing and need to be constantly updated. We have a variety of subjects (roles). The environment in which an access is requested can also affect an access decision. Some policies can require a set of obligations to be performed in conjunction with policy enforcement (auditing).""	Security Patterns in Practice	SEC",,,,,,,,,,
"Web Services Security	WS-Policy	""In order to assure reliability", availability and security, web services need to apply policies. Without them," they will have no means of specifying what quality factors they enforce and require from their users. This situation would result in all kinds of problems for the institution and its users. The solution to this problem must resolve the following forces: Data security of web services. Malicious users may try to read or modify sensitive information stored in a web service. We need to define appropriate policies to protect this information. Guaranteed message exchange. We need to assure the delivery of messages between partners and give a requester the ability to verify whether the message was delivered. Policy integrity. Malicious users may try to replace or remove policy assertions for their own benefit. We need to ensure that policy assertions have not been modified. Mutual authentication. Clients and services must be able to mutually authenticate. Denial of service. An attacker could try to use malformed assertions to produce a non-terminating loop of policy evaluations.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,
"Web Services Security	WS-Trust	""Establishing security relationships is fundamental for the interoperation of distributed systems. Without applying relevant trust relationships expressed in the same way between the involved parties", web services have no means of assuring security and interoperability in their integration. How can we define a means by which the parties are able to trust each other’s security credentials? The solution to this problem must resolve the following forces: Knowledge. In human relationships, we are concerned with first knowing a person before we trust them. That attitude applies also to web services. We need to have a structure that encapsulates some knowledge about the unit we intend to trust. Policy consideration. The web service policy contains all the required assertions and conditions that should be met to use that web service. The trust structure should consider this policy for verification purposes. Confidentiality and integrity. Policies may include sensitive information. Malicious consumers may acquire sensitive information, fingerprint the service and infer service vulnerabilities. This implies that the policy itself should be protected. Message integrity. The data to be transferred between the partners through messages may be private data that needs to be protected. Attackers may try to modify or replace these messages. Time validity. For protection purposes," any interactions or means of communications (including the trust relationships) between the web services should have a time limit that determines for how long the trust relationship is valid.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Web Services Security	SAML Assertion	""A subject may need to access a resource in a domain that does not know about it because the relevant user is from a different security domain. In order to apply access control to the target domain’s resources", security information about the subject should be transmitted between those two domains. How can we communicate this information? The solution to this problem must resolve the following forces: The target security domain may implement different levels of security functionalities (authentication or not," access control or not). The identity management unit of the subject’s domain and the target security domain may be implemented using different platforms. We need a platform-independent way of communicating identity information. Different domains may express security constraints or apply authentication in different ways. We need a unifying structure.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,
"Web Services Cryptography	Symmetric Encryption	""Applications that communicate with external applications interchange sensitive data that may be read by unauthorized users while they are in transit. Clearly", if we send sensitive information, we are exposing confidential information and we may be risking the privacy of many individuals. How can we protect messages from being read by intruders? The solution to this problem must resolve the following forces: Confidentiality. Messages may be captured while they are in transit, so we need to prevent unauthorized users from reading them by hiding the information in the message. Convenient reception. The hidden information should be revealed conveniently to the receiver. Protocol. We need to apply the solution properly," or it will not be able to withstand attacks (there are several ways to attack a method of hiding information). Performance. The time to hide and recover the message should be acceptable. Security. In some cases we need to have a very high level of security.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Web Services Cryptography	Asymmetric Encryption	""Applications that communicate with external applications interchange messages that may contain sensitive information. These messages can be intercepted and read by imposters during transmission. How can we send sensitive information securely over insecure channels? The solution to this problem must resolve the following forces: Confidentiality. Messages may be captured while they are in transit", so we need to prevent unauthorized users from reading them by hiding the information the message contains. Hiding information also makes replaying of messages by an attacker harder to perform. Reception. The hidden information should be revealed conveniently to the receiver. Protocol. We need to apply the solution properly, or it will not be able to withstand attacks (there are several ways to attack a method of hiding information). Performance. The time to hide and recover the message should be acceptable. Key distribution. Two parties may want to communicate to each other," but they have not agreed on a shared key: we need a way to send messages without establishing a common key.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,
"Web Services Cryptography	Digital Signature with Hashing	""In many applications we need to verify the origin of a message (message authentication). Since an imposter may assume the identity of a principal", how can we verify that a message came from a particular principal? Also, messages that travel through insecure channels can be captured and modified by attackers. How can we know that the message or document that we are receiving has not been modified? The solution to this problem must resolve the following forces: For legal or business reasons we need to be able to verify who sent a particular message. Otherwise, we may not be sure of its origin, and the sender may deny having sent it (repudiation). Messages may be altered during transmission, so we need to verify that the data is in its original form when it reaches its destination. The length of the signed message should not be significantly larger than the original message," otherwise we would waste time and bandwidth. Producing a signed message should not require large computational power or take a long time.""	Security Patterns in Practice	SEC",,,,,,,,,,,,
"Web Services Cryptography	XML Encryption	""In many applications that communicate with external applications users exchange sensitive data. This data may be read by unauthorized people while the messages are in transit. How can we prevent this? The solution to this problem must resolve the following forces: Messages may be captured while they are in transit", so we need to prevent unauthorized users from reading them by hiding the information the message contains using encryption. We need to express encrypted elements in a standardized XML format to allow encrypted data to be nested within an XML message, otherwise different applications cannot interoperate. Different parts of a message may be intended for different recipients, and not all the information contained within a message should be available to all the recipients. Thus, recipients should be able to read only those parts of the message that are intended for them. For flexibility reasons, both symmetric and asymmetric encryption algorithms should be supported. If a secret key is embedded in the message, it should be protected," otherwise an attacker could read some messages.""	Security Patterns in Practice	SEC",,,,,,,,,,,
"Web Services Cryptography	XML Signature	""In many applications we need to verify the origin of a message (message authentication). Since an imposter may assume the identity of a principal", how can we verify that a message came from a particular principal? Also, messages that travel through insecure channels can be captured and modified by attackers. How do we know that the message or document that we are receiving has not been modified? The solution to this problem must resolve the following forces: For legal or business reasons we need to be able to verify who sent a particular message, otherwise we may not be sure of its origin, and the sender may deny having sent it (repudiation). We assume the sender has signed the message to prove they are its author. Messages may be altered during transmission, so we need to verify that the data is in its original form when it reaches its destination. The length of the signed message should not be significantly greater than the original message, otherwise we would waste time and bandwidth. Producing a signed message should not require a lot of computational power or take a long time. We need to express a digital signature in a standardized XML format, so interoperability can be ensured between applications. There may be situations in which we want to ensure proper origin or integrity in specific parts of a message. For example, an XML message can travel through many intermediaries that add or subtract information, so if we sign the entire message," the signature would have no meaning. We need to be able to sign portions of a message.""	Security Patterns in Practice	SEC",,,,,,,,
"Web Services Cryptography	WS-Security	""Sending messages through insecure channels exposes the messages to a variety of attacks", including illegal reading, modification or replay, and the sender can deny having sent a specific message [Sta06]. We have cryptographic solutions for these problems; however, there are many algorithms and protocols and we need to make a selection self-descriptive. The solution to this problem must resolve the following forces: Interoperability. We need a common format in SOAP messages in order to add security features, so both senders and receivers can process messages that contain security features without the need for previous agreements. Fine degree of protection. SOAP messages may travel through many intermediaries in a network environment," and different users may need access to different parts of them. We may need to protect different parts of a message in different ways.""	Security Patterns in Practice	SEC",,,,,,,,,,,,
"Secure Middleware	Secure Broker	""In addition to the liabilities of the broker [Bus96]", security threats add a new set of problems. How can we secure the broker’s activities? The threats affecting the pattern include: Illegal access. Clients’ access to servers may need to be restricted, and servers’ access to clients may need to be restricted, for compliance and application semantics purposes. Message interception or replaying. An attacker may intercept the messages from client to server and read or modify them. Message replaying is another possibility. Spoofing (forgery). If a rogue server can portray itself as valid to the broker, it can appear to service client requests while also compromising client data, or perform a wide variety of other attacks on unsuspecting clients. Likewise, if a rogue broker can portray itself as valid to servers and clients, it can do harm by recording traffic between clients and servers, substituting other clients and servers for valid ones, and so on. And if a client can forge its identity to a broker, it can access services for which it does not have rights. There are a wide variety of attacks based on forgery: redirection of traffic from official sites to forged sites; spamming while masking the source’s destination; cache poisoning, in which invalid entries are stored in the broker’s repository; and routing attacks, in which traffic intended for one destination is sent to another [NTC01]. Denial of service. Valid entries in the repository could be removed, and they will not be accessible. And with access to the broker’s server repository, DoS attacks can be launched against member servers. By limiting the server’s abilities to respond to requests," clients can be disabled [Kau02].""	Security Patterns in Practice	SEC",,,
"Secure Middleware	Secure Pipes and Filters	""The essence of the Pipes and Filters pattern is that every time data reaches a different stage", different functions are applied on it, and in a secure version these actions should be controlled. In this kind of system, we may also need the flexibility to reorder the steps of the process or change the processing steps. In the example above, a new person may be assigned to the workflow to perform additional functions on the documents, which may require adding an extra step. How can we control the actions to be performed in a data pipeline and provide security for the pipeline activities? Additionally, the data may be moved along the pipeline using insecure channels, and the users defining the data transformations may be remote. The solution to this problem must resolve the following forces: Stage control. The system may need to control, at each stage of processing, who can do what (what operations can be applied) with the data in the pipeline. This may be necessary in both automatic and interactive pipelines, otherwise employees might introduce illegal content or filter out wanted information. Authenticity. We might require the data or the message carrying it to be authenticated before it is accepted by the next or the previous stage, otherwise an imposter might send data to be processed. Message protection. Before sending data in the pipes we may need to hide it to prevent eavesdropping. We may also need to verify the authenticity of messages. Reconfiguration control. Due to regulatory constraints, work changes, or efficiency, some documents may need extra stages, or to skip stages. We need to be able to reconfigure the number or order of the steps. This reconfiguration should be controlled," or a user might skip necessary stages or add unintended stages. Recording. We should keep track of any actions applied to the data in cases where legal documents or regulatory compliance is involved. Transparency. The security controls should be transparent to the users of the pipeline. Overhead. The security controls should not affect performance significantly.""	Security Patterns in Practice	SEC",,
"Secure Middleware	Secure Blackboard	""Usually we want a variety of knowledge sources to solve a difficult problem or conduct a process. Nevertheless", how can we control the actions to be performed in the blackboard so that we provide the required level of security for the system? The solution to this problem must resolve the following forces: Nondeterminism. The sequence of activities or operations over data is usually unpredictable. Also, the number of knowledge sources might be hard to predict. Access control. Blackboard data should only be read or modified by authorized knowledge sources, otherwise users may see or override important information. Authenticity. It might be necessary to verify that the knowledge sources are authentic, otherwise we might receive false information, or our information could be leaked outside our system. The channels they use must be secure. Controlled reconfiguration. Due to regulatory constraints, work changes or efficiency, we need to be able to reconfigure the number of knowledge sources or their order of operation. This reconfiguration must be controlled. A faulty reconfiguration could lead to incorrect conclusions, or to the inclusion of inconsistent or erroneous information. Records. For billing and security purposes, logging the actions at each update of the blackboard may be necessary. This information can be audited later. Transparency. The security controls should be transparent to the users of the system," or they might not use them. Overhead. The security controls should not impose a significant overhead on the functions of the system.""	Security Patterns in Practice	SEC",,,,,,,,
"Secure Middleware	Secure Adapter	""The Adapter converts the interface of an existing class into a more convenient interface", but its original description does not take in consideration security issues. To illustrate and identify some possible attacks, consider the following example: we have an interface, RequestServices, which is used to request services from various servers. We want to be able to send requests to a JDBC API; however, our interface is incompatible with the JDBC API. We create a RequestServicesAdapter that adapts requests to JDBC. For example, a client sends a request for a database connection. The RequestServicesAdapter converts the request to a JDBC request, which in turn returns a response containing the requested data items. We can identify the following threats in this case: Threat 1 The database accessed through the JDBC interface could be an imposter, and we could be sending or receiving data from a malicious database. Threat 2 The client may be an imposter, trying to access the data of an authorized user. Threat 3 The client making the request may not have permission to send such a request; that is, the client may try to access data to which it is not authorized. Threat 4 If the client is remote," the data sent and received may be intercepted by intruders.""	Security Patterns in Practice	SEC",,,,,,,
"Secure Middleware	Secure Three-Tier Architecture	""Systems that contain sensitive and valuable data will attract attackers. How can we provide security in the presence of internal and external threats? The solution to this problem must resolve the following forces: Completeness. We need to secure all the tiers of the system. Leaving any layer unprotected will allow some attacks to succeed. Threats. Attacks may come from legitimate users", using the resources available to them, while other attacks may come from external users through Internet vulnerabilities. Possible misuses of the system include illegal reading or modification of information. These actions may have serious negative effects on the institution that owns the information, and so cannot be tolerated. We need to stop or mitigate these attacks. Availability and recovery. We need to provide availability through service continuity and robust recovery in case of disaster, otherwise economic losses might result. Transparency. The security system should be mostly transparent to the users. If the users need to perform special actions for security," they may just skip them. Accountability. A user may deny having carried out some action. We need to be able to show that they actually performed the action. Policies. We should be able to apply institution policies to control the use of the information.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Secure Middleware	Secure Enterprise Service Bus	""When an organization has many scattered services", how can we aggregate them so they can be used together to assemble applications, at the same time keeping the architectural structure as simple as possible, and apply uniform standards? The solution to this problem must resolve the following forces: Interoperability. It is fundamental for a business unit in an institution to be able to interact with a variety of services, internal or external. Simplicity of structure. We want a simple way to interconnect services; this simplifies the work of the integrators. Scalability. We need to have the ability to expand the number of interconnected services without making changes to the basic architecture. Message flexibility. We need to provide a variety of message invocation styles (synchronous and asynchronous) and formatting. We can thus accommodate all service needs. Simplicity of management. We need to monitor and manage many services, performing load balancing, logging, routing, format conversion and filtering. Flexibility. New types of services should be accommodated easily. Transparency. We should be able to find services without needing to know their locations. Quality of service. We may need to provide different degrees of security, reliability, availability or performance. Use of policies. We need a policy-based configuration and management. This allows convenient governance and systematic changes. Policies are high-level guidelines about architectural or institutional aspects, and are important in any system that supports systematic governance," as well as security and compliance [Sch06b]. Standard interfaces. We need explicit and formal interface contracts. Recording. We need to record sensitive transactions. Security. We can enumerate threats and add defenses.""	Security Patterns in Practice	SEC",,,,,,
"Secure Middleware	Secure Distributed Publish/Subscribe	Subscribers register and receive messages in which they are interested. How can we organize publishers and subscribers such that their interactions are secure? We relate threats to use cases as goals of the attacker [Fer06b]: Subscription S1: An imposter subscribes to receive information. S2: The publisher is an imposter and collects information (and maybe money) from potential subscribers. S3: The subscription messages are intercepted and read or modified by an attacker. Unsubscription U1: An imposter removes a subscriber. Publish P1: An imposter receives information illegally. P2: An imposter publishes illegal information. P3: An attacker reads or modifies intercepted information.	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,,,
"Secure Middleware	Secure Model-View-Controller	""How can we maintain an acceptable level of security between the model", the view and the controller in the presence of possible attacks? The solution to this problem must resolve the following forces: Authenticity. We need to be sure that users who interact with our system are legitimate. Remote users will want to be sure that our system is authentic. Confidentiality. We may need to restrict access to the model’s information to some users or roles. Also some portions of the data in transit from the model to the view must be protected against eavesdropping. Integrity. We may want to allow only some users or roles to make changes to the model," and only authorized changes. Records. The model may contain sensitive information and we want to have a record of all accesses to it.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,,
"Misuse	Worm	""A worm tries to take advantage of any input to invade a system. Users might open attachments carrying worms and some ports of a system may be unprotected or have vulnerabilities; all of these give the worm a chance to invade. Mail systems and file transfer systems for example", include lists of addresses that can be used by the worm to find places to which to propagate. Many systems do not control access to their system directories and do not restrict Internet traffic, which facilitates a worm invasion. The solution to this problem must resolve the following forces: Objectives. A worm’s objectives may be political, monetary or vandalism. A political or terrorist worm typically tries to produce damage to an antagonist; a monetary worm tries to reach many places to collect information or drop spyware; a vandal worm tries to destroy or damage information. Reach. To try to reach as many places as possible or to specific sites. For most worms, reaching many places is a basic objective. Presence manifestation. To try to show its presence in the system, so that victims know about it. Exceptions to this are cases in which the objective is to drop spyware. Credit. To embed an identification or mark so that the worm’s creator can take credit for it. Misuse. Perform some destruction and/or other misuses (confidentiality, integrity, or availability). The misuse may be delayed (time bomb). Obfuscation. To try to hide its structure to make its detection and removal harder. Collateral damage. In addition to specific misuses, the worm may require costly operations for its removal," stopping or disrupting business activities. Its propagation may affect the normal traffic in the network. Latency. A worm’s propagation must be as fast as possible to avoid detection and countermeasures. Activation. This can be done by enticing offers which may tempt users to open e-mail attachments or download procedures (social engineering). Other possibilities are invading through unprotected ports or taking advantage of vulnerabilities.""	Security Patterns in Practice	SEC",,,,,,,,,
"Misuse	Denial-of-Service in VoIP	""How can we trigger a DoS attack on a VoIP system? IP telephony subscribers need to be blocked from using VoIP services. The attack can be carried out by taking advantage of the following conditions: VoIP security is in an incipient phase at the moment: there is lack of expertise and security standards. Users might inadvertently expose the system. While some basic countermeasures exist", such as IDSs and firewalls, administrators may not configure them appropriately due to a lack of training and time. Until now VoIP has been developed and deployed focusing on functionality with less thought for security [Wie06b]. That means that the defenses that are in place are not very advanced. For example, strong authentication is not common in VoIP. With the rush to implement new VoIP systems, features and standards, implementation flaws are common. IP PBXs include many layers of software that may contain vulnerabilities. Programming mistakes, such as not properly checking the size of the parameters of a protocol request, when exploited, can result in the following issues: Remote access. An attacker obtaining remote (often administrator level) access. Malformed request DoS. A carefully crafted protocol request (a packet) exploiting a vulnerability that results in a partial or complete loss of function (in this case a single malformed packet may lead to a DoS). Load-based DoS. A flood of legitimate requests overwhelming a system [Col04]. As with any network-based service, enterprise VoIP must communicate with other components on a LAN and possibly over an untrusted network such as the Internet, where packets are easy to intercept. Because RTP (real-time transport protocol) carries media that must be delivered in real time to be usable for an acceptable conversation, VoIP is vulnerable to DoS attacks that impact the quality delivery of audio, such as those that affect jitter and delay. VoIP traffic can offer very good cover for DoS attacks," because VoIP runs continuous media over IP packets [CRN06].""	Security Patterns in Practice	SEC",,,,,
"Misuse	Spoofing Web Services	""How we can effectively perform a principal spoofing attack against web services so that we can access the information of another user? The attack can take advantage of the following vulnerabilities: Currently there is no method of verifying identity unequivocally. When a WSDL file is published", the interfaces of the web service are exposed, and thus its entry points. The source address of the request can be altered. There is a tendency to trust presented credentials without a more thorough check. Once the authentication stage is passed, other attacks can be generated more easily: for example, DDoS attacks Maybe the interchanged data items are not encrypted," and it may be possible to steal the credentials using special software. The resulting damage depends on the privileges of the credentials submitted.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,
"Cloud Computing Architecture	Infrastructure-as-a-Service	""Some organizations do not have the resources to invest in the infrastructure", middleware or applications that are needed to run their businesses. Also, they may not be able to handle increases in demand, or cannot afford to maintain and store unused resources. How can we provide these users with quality access to computational resources? The solution to this problem must resolve the following forces: Transparency. The underlying architecture should be transparent to its users. Users should be able to use the provider’s services without understanding its infrastructure. Flexibility. Different infrastructure configurations and resource volumes can be demanded by users. Elasticity. Users should be able to expand or reduce resources in order to meet the different needs of their applications. Pay-per-use. Users should only pay for the resources they consume. On-demand-service. Services should be provided on demand. Manageability. In order to manage a large volume of service requests," cloud resources must be easy to deploy and manage. Accessibility. Users should be able to access resources from anywhere at any time. Testability. We intend to develop system programs in this environment and we need to test them conveniently. Shared resources. Many users should be able to share resources in order to increase the volume of resource utilization and thus reduce costs. Isolation. Different user execution instances should be isolated from each other. Shared non-functional requirements provision (NFRs). Sharing of the costs of providing NFRs is necessary to allow providers to offer a higher level of NFRs. Security. The IaaS level is the basis for execution of the complete cloud system and its degree of security will affect all the applications running on it. We should provide a convenient and measurable structure to define security requirements.""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,
"Cloud Computing Architecture	Platform-as-a-Service	""Organizations may want to develop their own custom applications without buying and maintaining the developing tools", databases, operating systems and infrastructure underlying them. Also, when a team is spread across several locations, it is necessary to have a convenient way to coordinate their work. How can we provide secure PaaS functions? The solution to this problem must resolve the following forces: Collaboration. Sometimes teams of developers are located in different geographic locations. When working on a project, they all should have access to the development tools, code and data. Coordination. When many developers work on a complex project, they need to coordinate their work. Elasticity. There should be a way to increase or decrease resources for more compute-intense development and deployment tasks. Pay-per-use. Parties should only pay for the resources that they use. Transparency. Developers should not have to be concerned about the underlying infrastructure, including hardware and operating systems, and its configuration for development and deployment. On-demand services. Developers should be able to request an application tool and start using it. Accessibility. Developers should be able to access tools via standard networks, from anywhere at any time. Testability. We intend to develop application programs in this environment and we need to test them conveniently. Versatility. The platform should be able to be used to build applications for any domain or type of application. Different options for developing tools should be offered to the users. Simplification. Developers should be able to build applications without installing any tool or specialized software on their computers. Security. The platform should offer facilities for developing secure programs," and should itself be protected from attacks.""	Security Patterns in Practice	SEC",,,,,,,
"Cloud Computing Architecture	Software-as-a-Service	""Customers may need to use software products that do not require local installation and maintenance of the software. How can software be delivered over the network? The solution to this problem must resolve the following forces: Pay-per-use. Customers should be charged on a per-use basis", like utility services. Transparency. Customers should not be concerned about maintenance or updates to the software. On-demand services. Customers should have the ability to start using an application when they need to. Accessibility. Customers should be able to access the software applications at any time and anywhere. Flexibility. Customers should be able to configure the software application to their needs, such as currency or date formats. Elasticity. Applications should be able to scale down or up depending on the customers’ needs [Ju10]. For example," it should be possible to increase or decrease the number of users using the application. Simplification. Customers should not need to install any special software on their local machine. Security. The software offered to users must be secure: it should be built following a secure methodology [Uzu12c].""	Security Patterns in Practice	SEC",,,,,,,,,,,,,,,
